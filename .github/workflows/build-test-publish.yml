# Builds on all branches & PRs
# Deploys to PyPi on "release".
name: Build with and for Python

on: [push, pull_request]

jobs:
  typechecks:
    runs-on: ubuntu-latest
    name: Type checks
    strategy:
      max-parallel: 5
      matrix:
        python-version: [ "3.8", "3.9", "3.10", "3.11" ]
    steps:
      - uses: actions/checkout@v3
      - uses: theCapypara/mypy-check@rust-support
        name: Run type checks
        with:
          mypy_flags: '--config-file mypy.ini'
          requirements: '-r requirements.txt'
          python_version: '${{ matrix.python-version }}'

  build_linux:
    runs-on: ubuntu-latest
    name: Wheel Linux
    steps:
      # For tags we assume the version in setup.py is correct!
      - name: Checkout
        uses: actions/checkout@v3
      - name: Rewrite version for dev if not tag
        if: "!startsWith(github.ref, 'refs/tags/')"
        run: |
          perl -i -pe "s/__version__\s*=\s*'(.*?)(\.rc.*|\.a.*|\.post.*)?'/__version__='\1.dev0+${GITHUB_SHA::8}'/" setup.py
      - name: Note version
        run: |
          echo "PACKAGE_VERSION=$(python3 -- ./setup.py --version)" >> $GITHUB_ENV
      - name: Build Python wheels
        uses: RalfG/python-wheels-manylinux-build@v0.5.0-manylinux2014_x86_64
        with:
          python-versions: 'cp38-cp38 cp39-cp39 cp310-cp310 cp311-cp311'
          build-requirements: 'GitPython'
          pre-build-command: 'source ./build-manylinux.sh'
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels-linux
          path: dist/*.whl
  build_macos_windows:
    runs-on: ${{ matrix.os }}
    name: Mac/Win Wheel
    strategy:
      fail-fast: false
      matrix:
        os: [ macos-11, windows-2019 ]
        python-version: [ '3.8', '3.9', '3.10', '3.11' ]
        arch: [ 'x64', 'x86' ]
        exclude:
          - os: macos-11
            arch: 'x86'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Rewrite version for dev if not tag
        if: "!startsWith(github.ref, 'refs/tags/')"
        shell: bash
        run: |
          perl -i -pe "s/__version__\s*=\s*'(.*?)(\.rc.*|\.a.*|\.post.*)?'/__version__='\1.dev0+${GITHUB_SHA::8}'/" setup.py
      - name: Note version
        shell: bash
        run: |
          echo "PACKAGE_VERSION=$(python3 -- ./setup.py --version)" >> $GITHUB_ENV
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          target: "${{ matrix.os == 'windows-2019' && 'i686-pc-windows-msvc' || 'x86_64-apple-darwin' }}"
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.arch }}
      - name: Upgrade pip, install dev dependencies
        run: |
          python -m pip install --upgrade pip wheel
          python -m pip install -r dev-requirements.txt
          python -m pip install -r requirements.txt
      - name: Download GNU Tar
        uses: suisei-cn/actions-download-file@v1
        if: "matrix.os == 'windows-2019'"
        with:
          url: https://skytemple.org/build_deps/tar.exe
          target: "C:\\tarout"
      - name: Prepend GNU Tar to Path
        if: "matrix.os == 'windows-2019'"
        shell: powershell
        run:
          echo "C:\tarout" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      - name: Build Python wheels
        run: |
          python setup.py bdist_wheel
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels-${{ matrix.os }}-py${{ matrix.python-version }}-${{ matrix.arch }}
          path: dist/*.whl
  build_mingw:
    runs-on: windows-2019
    name: Msys Wheel
    strategy:
      fail-fast: false
      matrix:
        include: [
          { msystem: MINGW64, arch: x86_64, path: mingw64, rust_target: x86_64-pc-windows-gnu, lib_dir: /mingw64/lib/, include_dir: /mingw64/include/python3.8/ },
          { msystem: MINGW32, arch: i686, path: mingw32, rust_target: i686-pc-windows-gnu, lib_dir: /mingw32/lib/, include_dir: /mingw32/include/python3.8/ }
        ]
    steps:
      - name: Install MSys2 and dependencies
        uses: msys2/setup-msys2@v2
        with:
          update: true
          msystem: ${{ matrix.msystem }}
          install: >-
            git
            unzip
            mingw-w64-${{ matrix.arch }}-curl
            mingw-w64-${{ matrix.arch }}-python
            mingw-w64-${{ matrix.arch }}-python-pip
            mingw-w64-${{ matrix.arch }}-python-pillow
            mingw-w64-${{ matrix.arch }}-openssl
            mingw-w64-${{ matrix.arch }}-toolchain
            mingw-w64-${{ matrix.arch }}-gettext
            mingw-w64-${{ matrix.arch }}-diffutils
      - name: Checkout
        uses: actions/checkout@v3
      - name: Rewrite version for dev if not tag
        if: "!startsWith(github.ref, 'refs/tags/')"
        shell: msys2 {0}
        run: |
          perl -i -pe "s/__version__\s*=\s*'(.*?)(\.rc.*|\.a.*|\.post.*)?'/__version__='\1.dev0+${GITHUB_SHA::8}'/" setup.py
      - name: Note version
        shell: msys2 {0}
        run: |
          echo "PACKAGE_VERSION=$(python3 -- ./setup.py --version)" >> $GITHUB_ENV
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          target: ${{ matrix.rust_target }}
      - name: Upgrade pip, install dev dependencies
        shell: msys2 {0}
        run: |
          python -m pip install --upgrade pip wheel
          python -m pip install -r dev-requirements.txt
          python -m pip install -r requirements.txt
      - name: Fix Path and python symlink
        shell: msys2 {0}
        run: |
          ls /${{ matrix.path }}/bin
          ln -s /${{ matrix.path }}/bin/mingw*-make.exe /${{ matrix.path }}/bin/make.exe
          ln -s /${{ matrix.path }}/lib/libpython3.10.dll.a /${{ matrix.path }}/lib/libpython310.dll.a
      - name: Build Python wheels
        shell: msys2 {0}
        run: |
          PATH="$PATH:/c/Users/runneradmin/.cargo/bin" python setup.py bdist_wheel
        env:
          CARGO_BUILD_TARGET: ${{ matrix.rust_target }}
          PYO3_CROSS_LIB_DIR: ${{ matrix.lib_dir }}
          PYO3_CROSS_INCLUDE_DIR: ${{ matrix.include_dir }}
          PYO3_CROSS_PYTHON_VERSION: "3.10"
          GETTEXT_LIB_DIR: "/${{ matrix.path }}/lib/"
          GETTEXT_INCLUDE_DIR: "/${{ matrix.path }}/include/"
          GETTEXT_BIN_DIR: "/${{ matrix.path }}/bin/"
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels-msys2-py-${{ matrix.msystem }}
          path: dist/*.whl
  deploy:
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - build_linux
      - build_macos_windows
    runs-on: ubuntu-latest
    name: Deploy wheels to PyPI
    steps:
      - name: Download wheels
        uses: actions/download-artifact@v2
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
      - name: Upgrade pip
        run: |
          python -m pip install --upgrade pip
          pip install twine
      - name: Publish wheels to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          twine upload wheels-linux/*manylinux*.whl wheels-windows*/*.whl wheels-macos*/*.whl
