# Builds on all branches & PRs
# Deploys to PyPi on "release".
name: Build with and for Python

on: [push, pull_request]

jobs:
  typechecks:
    runs-on: ubuntu-latest
    name: Type checks
    strategy:
      max-parallel: 5
      matrix:
        python-version: [ "3.9", "3.10", "3.11", "3.12" ]
    steps:
      - uses: actions/checkout@v4
      - uses: theCapypara/mypy-check@rust-support
        name: Run type checks
        with:
          mypy_flags: '--config-file mypy.ini'
          requirements: '-r requirements.txt'
          python_version: '${{ matrix.python-version }}'

  build_linux:
    runs-on: ubuntu-latest
    name: Wheel Linux
    strategy:
      max-parallel: 5
      matrix:
        pythonver: [ "cp39", "cp310", "cp311", "cp312" ]
        arch: ["x86_64"]#, "aarch64"]  # aarch64 build takes AGES so we skip it for now
    steps:
      # For tags we assume the version in setup.py is correct!
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all
      - name: Rewrite version for dev if not tag
        if: "!startsWith(github.ref, 'refs/tags/')"
        run: |
          perl -i -pe "s/__version__\s*=\s*'(.*?)(\.rc.*|\.a.*|\.post.*)?'/__version__='\1.dev0+${GITHUB_SHA::8}'/" setup.py
      - name: Note version
        run: |
          echo "PACKAGE_VERSION=$(python3 -- ./setup.py --version)" >> $GITHUB_ENV
      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel
      - name: Build wheels
        run: python -m cibuildwheel --output-dir dist
        env:
          CIBW_BUILD: "${{ matrix.pythonver }}-manylinux*"
          CIBW_BEFORE_ALL: "curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain stable -y"
          CIBW_ENVIRONMENT: 'PATH="$PATH:$HOME/.cargo/bin"'
          CIBW_ARCHS: ${{ matrix.arch }}
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels-linux
          path: dist/*.whl
  build_macos_windows:
    runs-on: ${{ matrix.os }}
    name: Mac/Win Wheel
    strategy:
      fail-fast: false
      matrix:
        os: [ macos-11, windows-2019 ]
        python-version: [ '3.9', '3.10', '3.11', '3.12' ]
        arch: [ 'x86_64', 'AMD64', 'x86', 'arm64' ]
        exclude:
          - os: macos-11
            arch: 'x86'
          - os: windows-2019
            arch: 'arm64'
          - os: macos-11
            arch: 'AMD64'
          - os: windows-2019
            arch: 'x86_64'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Rewrite version for dev if not tag
        if: "!startsWith(github.ref, 'refs/tags/')"
        shell: bash
        run: |
          perl -i -pe "s/__version__\s*=\s*'(.*?)(\.rc.*|\.a.*|\.post.*)?'/__version__='\1.dev0+${GITHUB_SHA::8}'/" setup.py
      - name: Note version
        shell: bash
        run: |
          echo "PACKAGE_VERSION=$(python3 -- ./setup.py --version)" >> $GITHUB_ENV
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          target: "${{ matrix.os == 'windows-2019' && 'i686-pc-windows-msvc' || ( matrix.arch == 'aarch64' && 'aarch64-apple-darwin' || 'x86_64-apple-darwin') }}"
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Download GNU Tar
        uses: suisei-cn/actions-download-file@v1
        if: "matrix.os == 'windows-2019'"
        with:
          url: https://skytemple.org/build_deps/tar.exe
          target: "C:\\tarout"
      - name: Prepend GNU Tar to Path
        if: "matrix.os == 'windows-2019'"
        shell: powershell
        run:
          echo "C:\tarout" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel
      - name: Build wheels
        run: python -m cibuildwheel --output-dir dist
        env:
          CIBW_ARCHS: ${{ matrix.arch }}
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels-${{ matrix.os }}
          path: dist/*.whl
  deploy:
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - build_linux
      - build_macos_windows
    runs-on: ubuntu-latest
    name: Deploy wheels to PyPI
    steps:
      - name: Download wheels
        uses: actions/download-artifact@v3
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
      - name: Upgrade pip
        run: |
          python -m pip install --upgrade pip
          pip install twine
      - name: Publish wheels to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          twine upload wheels-linux/*manylinux*.whl wheels-windows*/*.whl wheels-macos*/*.whl
